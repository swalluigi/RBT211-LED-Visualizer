
Assignment 9.1- bit visualizer.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000006e  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000000  00800060  00800060  000000c2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  000000c2  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  000000f4  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000020  00000000  00000000  00000130  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000004c8  00000000  00000000  00000150  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000445  00000000  00000000  00000618  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   0000017b  00000000  00000000  00000a5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000024  00000000  00000000  00000bd8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    0000034f  00000000  00000000  00000bfc  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000010  00000000  00000000  00000f4b  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0e c0       	rjmp	.+28     	; 0x1e <__ctors_end>
   2:	15 c0       	rjmp	.+42     	; 0x2e <__bad_interrupt>
   4:	14 c0       	rjmp	.+40     	; 0x2e <__bad_interrupt>
   6:	13 c0       	rjmp	.+38     	; 0x2e <__bad_interrupt>
   8:	12 c0       	rjmp	.+36     	; 0x2e <__bad_interrupt>
   a:	11 c0       	rjmp	.+34     	; 0x2e <__bad_interrupt>
   c:	10 c0       	rjmp	.+32     	; 0x2e <__bad_interrupt>
   e:	0f c0       	rjmp	.+30     	; 0x2e <__bad_interrupt>
  10:	0e c0       	rjmp	.+28     	; 0x2e <__bad_interrupt>
  12:	0d c0       	rjmp	.+26     	; 0x2e <__bad_interrupt>
  14:	0c c0       	rjmp	.+24     	; 0x2e <__bad_interrupt>
  16:	0b c0       	rjmp	.+22     	; 0x2e <__bad_interrupt>
  18:	0a c0       	rjmp	.+20     	; 0x2e <__bad_interrupt>
  1a:	09 c0       	rjmp	.+18     	; 0x2e <__bad_interrupt>
  1c:	08 c0       	rjmp	.+16     	; 0x2e <__bad_interrupt>

0000001e <__ctors_end>:
  1e:	11 24       	eor	r1, r1
  20:	1f be       	out	0x3f, r1	; 63
  22:	cf e5       	ldi	r28, 0x5F	; 95
  24:	d2 e0       	ldi	r29, 0x02	; 2
  26:	de bf       	out	0x3e, r29	; 62
  28:	cd bf       	out	0x3d, r28	; 61
  2a:	02 d0       	rcall	.+4      	; 0x30 <main>
  2c:	1e c0       	rjmp	.+60     	; 0x6a <_exit>

0000002e <__bad_interrupt>:
  2e:	e8 cf       	rjmp	.-48     	; 0x0 <__vectors>

00000030 <main>:
	

int main(void)
{
	
    ADMUX|= (0 << REFS2) | (0 << REFS1 ) | (0 << REFS0 ) | (1 << ADLAR) | (0 << MUX3 ) | (0 << MUX2 ) | (1 << MUX1 ) | (0 << MUX0 ); //REFS pins are voltage reference selection bits. seting (REFS1, REFS0) as (0,0) 
  30:	87 b1       	in	r24, 0x07	; 7
  32:	82 62       	ori	r24, 0x22	; 34
  34:	87 b9       	out	0x07, r24	; 7
																											 // ADLAR- left adjust bit
																											 // MUX pins select which ADC pin to use. (0010) means we are suing ADC2, which is PB4 (pin 3). this pin is connected to the potentiometer
																											 
	ADCSRA |= (1 << ADEN ) | (0 << ADSC ) |(0 << ADATE) |(0 << ADIF ) |(0 << ADIE ) |(1 << ADPS2 ) |(1 << ADPS1 ) |(0 << ADPS0 ); // ADEN: ADC enable
  36:	86 b1       	in	r24, 0x06	; 6
  38:	86 68       	ori	r24, 0x86	; 134
  3a:	86 b9       	out	0x06, r24	; 6
																														 // ADSC: starts conversions in setup code if enabled. look at page 136 on datasheet for more info
																														//	ADATE: Auto trigger enable. trigger source selected in ADCSRB 
																														//	ADIF: intterupt flag. makes it run in an interupt block
																														//  ADPS bits: Prescaler select bits. determines the prescaler division factor between system clock frequecy and input. minimum divion is 2 (0,0,0)
																														
	ADCSRB |= (0 << ADTS2 ) | ( 0 << ADTS1) | (0 << ADTS0 ); //ADTS = auto triger source: (0,0,0) puts it in free running mode
  3c:	83 b1       	in	r24, 0x03	; 3
  3e:	83 b9       	out	0x03, r24	; 3
	
	
	//START ADC CONVERSION (Free runnign)
											
	// because the ATtiny is bineg used, PWM is needed
	TCCR0A |= (1 << COM0B1) | (0 << COM0B0) |  (1 << WGM01) | (1 << WGM00);  //WGM02, WGM01, WGM00 are set to (0,1,1) to enable fast PWM mode
  40:	8a b5       	in	r24, 0x2a	; 42
  42:	83 62       	ori	r24, 0x23	; 35
  44:	8a bd       	out	0x2a, r24	; 42
	// The COM ports (1,0), represent OC0A/OC0B depending if its C0M0Bx oe COM0Ax. (1,0) puts the timer in compare match mode
	
	TCCR0B |=(0 << CS02) | (0 << CS01) | (1 << CS00) | (0 << WGM02);
  46:	83 b7       	in	r24, 0x33	; 51
  48:	81 60       	ori	r24, 0x01	; 1
  4a:	83 bf       	out	0x33, r24	; 51
	// CS02, CS01, CS00vare set to (0,0,1), which sets no prescaler.
	
	DDRB |= (1 << PB1); // sets PB1 (pin 6) as output
  4c:	87 b3       	in	r24, 0x17	; 23
  4e:	82 60       	ori	r24, 0x02	; 2
  50:	87 bb       	out	0x17, r24	; 23
	
																									 		
    while (1) 
    {
		int Analog_value_H = ADCH; // reads ADC the 8-bit high (most sig bits) value  into this  integer. if ADLAR = 0, there is only two that can be read (0b000000xx)
  52:	85 b1       	in	r24, 0x05	; 5
		int Analog_value_L = ADCL; // reads ADC low value (least significant bits)  into this  integer  (0bxxxxxxxx)
  54:	84 b1       	in	r24, 0x04	; 4
		int Analog_value = ADC; // 10 bit number 0bxxxxxxxxxx
  56:	84 b1       	in	r24, 0x04	; 4
  58:	95 b1       	in	r25, 0x05	; 5
		// 8 least significant bits 2^8. between 0-255
		
		//0 will be 0 V read
		// MAX value (1023) will be 5 volts
		
		ADCSRA |= (1 << ADSC);         // start ADC measurement
  5a:	86 b1       	in	r24, 0x06	; 6
  5c:	80 64       	ori	r24, 0x40	; 64
  5e:	86 b9       	out	0x06, r24	; 6
		    while (ADCSRA & (1 << ADSC) ); // wait till conversion complete
  60:	36 99       	sbic	0x06, 6	; 6
  62:	fe cf       	rjmp	.-4      	; 0x60 <__SREG__+0x21>
 
		    
			    OCR0B = ADCH;
  64:	85 b1       	in	r24, 0x05	; 5
  66:	88 bd       	out	0x28, r24	; 40
	// CS02, CS01, CS00vare set to (0,0,1), which sets no prescaler.
	
	DDRB |= (1 << PB1); // sets PB1 (pin 6) as output
	
																									 		
    while (1) 
  68:	f4 cf       	rjmp	.-24     	; 0x52 <__SREG__+0x13>

0000006a <_exit>:
  6a:	f8 94       	cli

0000006c <__stop_program>:
  6c:	ff cf       	rjmp	.-2      	; 0x6c <__stop_program>
